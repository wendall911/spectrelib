plugins {
    id 'org.quiltmc.loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_id}-quilt"

repositories {

    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release/'
    }

    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot/'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}@zip")
    })
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
        exclude group: "net.fabricmc"
    }

    implementation group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'
    implementation group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    include group: 'com.electronwill.night-config', name: 'core', version: '3.6.5'
    include group: 'com.electronwill.night-config', name: 'toml', version: '3.6.5'
}

loom {
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += "licenses"
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand 'version': project.version, 'quilt_mc_version_range': project.quilt_mc_version_range, 'license': project.license,
                'mod_id': project.mod_id, 'mod_author': project.mod_author, 'mod_description': project.mod_description,
                'mod_name': project.mod_name
    }

    filesMatching("pack.mcmeta") {
        expand 'mod_name': project.mod_name
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        if (project.hasProperty('urlMaven')) {

            if (project.hasProperty('userMaven') && project.hasProperty('passMaven')) {

                maven {
                    url urlMaven
                    credentials {
                        username userMaven
                        password passMaven
                    }
                }
            }
        }

        if (project.hasProperty('localmaven')) {
            maven {
                url "file://" + localmaven
            }
        }
    }
}
